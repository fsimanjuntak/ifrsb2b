package com.ibm.id.isat.usage.cs5

import org.apache.spark.sql._
import com.ibm.id.isat.utils._

object CS5Aggregate {
  
  def genHourlySummary( sqlContext:SQLContext ) : DataFrame = {
    return sqlContext.sql("""
        select 
        TRANSACTION_HOUR HOUR_ID, 
        A_PARTY_NUMBER MSISDN, 
        A_PREFIX PREFIX_NUMBER,
        SERVICE_CITY_NAME SERVICE_CITY_NAME, 
        SERVICE_PROVIDER_ID SERVICE_PROVIDER_ID, 
        SERVICE_COUNTRY_NM COUNTRY_NAME,
        HLR_BRANCH_NM HLR_BRANCH_NM, 
        HLR_REGION_NM HLR_REGION_NM, 
        B_PREFIX OTHER_PREFIX_NO,
        DESTINATION_CITY_NAME DESTINATION_CITY_NAME, 
        DESTINATION_PROVIDER_ID DESTINATION_PROVIDER_ID, 
        DESTINATION_COUNTRY_NM DESTINATION_COUNTRY_NAME, 
        SERVICE_CLASS_ID SERVICE_CLASS_ID, 
        PROMO_PACKAGE_CODE PROMO_PACKAGE_CODE, 
        PROMO_PACKAGE_NAME PROMO_PACKAGE_NAME, 
        BRAND_NAME BRAND_NAME, 
        MSC_ADDRESS MSC_ADDRESS, 
        ORIGINAL_REALM ORIGINAL_REALM, 
        ORIGINAL_HOST ORIGINAL_HOST, 
        MCC_MNC MCCMNC, 
        LAC LAC, 
        CI CI, 
        LACI_CLUSTER_ID LACI_CLUSTER_ID,
        LACI_CLUSTER_NM LACI_CLUSTER_NM, 
        LACI_REGION_ID LACI_REGION_ID, 
        LACI_REGION_NM LACI_REGION_NM, 
        LACI_AREA_ID LACI_AREA_ID,  
        LACI_AREA_NM LACI_AREA_NM, 
        LACI_SALESAREA_ID LACI_SALESAREA_ID, 
        LACI_SALESAREA_NM LACI_SALESAREA_NM, 
        IMSI IMSI, 
        APN APN, 
        SERVICE_SCENARIO SERVICE_SCENARIO, 
        ROAMING_POSITION ROAMING_POSITION, 
        FAF FAF, 
        RATING_GROUP RATING_GROUP, 
        CONTENT_TYPE CONTENT_TYPE,  
        IMEI IMEI,  
        GGSN_ADDRESS GGSN_ADDRESS,  
        SGSN_ADDRESS SGSN_ADDRESS,  
        RAT_TYPE RAT_TYPE,  
        SERVICE_OFFER_ID SERVICE_OFFERING_ID, 
        PAYMENT_CATEGORY SUBSCRIBER_TYPE, 
        ACCOUNT_ID ACCOUNT_ID,  
        ACCOUNT_GROUP_ID ACCOUNT_GROUPID,  
        TRAFFIC_CASE TRAFFIC_CASE,  
        REVENUE_CODE REVENUE_CODE,  
        DIRECTION_TYPE DIRECTION_TYPE, 
        DISTANCE_TYPE DISTANCE_TYPE,  
        SERVICE_TYPE SERVICE_TYPE,  
        SERVICE_USG_TYPE SERVICE_USAGE_TYPE,  
        SVC_USG_DIRECTION SVC_USG_DIRECTION,  
        SVC_USG_DESTINATION SVC_USG_DESTINATION,  
        TRAFFIC_FLAG TRAFFIC_FLAG,  
        REVENUE_FLAG REVENUE_FLAG, 
        SUM(USAGE_VOLUME) TOTAL_VOLUME, 
        SUM(USAGE_AMOUNT) TOTAL_AMOUNT, 
        SUM(USAGE_DURATION) TOTAL_DURATION,  
        cast(SUM(HIT) as int) TOTAL_HIT, 
        COMMUNITY_ID_1 COMMUNITY_ID_1,  
        COMMUNITY_ID_2 COMMUNITY_ID_2,  
        COMMUNITY_ID_3 COMMUNITY_ID_3,  
        SUM(ACCUMULATED_COST) ACCUMULATED_COST, 
        RECORD_TYPE RECORD_TYPE,  
        ECI ECI,  
        SITE_TECH SITE_TECH,  
        SITE_OPERATOR SITE_OPERATOR,  
        REVENUE_CODE_L7 SVC_USG_TRAFFIC,  
        MGR_SVCCLSS_ID MGR_SVCCLSS_ID,  
        OFFER_ID OFFER_ID,  
        OFFER_ATTR_KEY OFFER_ATTR_KEY,  
        OFFER_ATTR_VALUE OFFER_ATTR_VALUE,  
        OFFER_AREA_NAME OFFER_AREA_NAME, 
        PRC_DT PRC_DT,  
        MICROCLUSTER_NAME MICROCLUSTER_NAME,  
        TRANSACTION_DATE transaction_date,  
        JOB_ID job_id,  
        SRC_TP src_tp 
      from cs5Output
        group by  
        TRANSACTION_HOUR,  
        A_PARTY_NUMBER, A_PREFIX, SERVICE_CITY_NAME, SERVICE_PROVIDER_ID, SERVICE_COUNTRY_NM, HLR_BRANCH_NM, HLR_REGION_NM, 
        B_PREFIX, DESTINATION_CITY_NAME, DESTINATION_PROVIDER_ID, DESTINATION_COUNTRY_NM, SERVICE_CLASS_ID, PROMO_PACKAGE_CODE, PROMO_PACKAGE_NAME, BRAND_NAME, MSC_ADDRESS, ORIGINAL_REALM, ORIGINAL_HOST, 
        MCC_MNC, LAC, CI, LACI_CLUSTER_ID, LACI_CLUSTER_NM, LACI_REGION_ID, LACI_REGION_NM, LACI_AREA_ID, LACI_AREA_NM, 
        LACI_SALESAREA_ID, LACI_SALESAREA_NM, IMSI, APN, SERVICE_SCENARIO, ROAMING_POSITION, FAF,RATING_GROUP, 
        CONTENT_TYPE, IMEI, GGSN_ADDRESS, SGSN_ADDRESS, RAT_TYPE, SERVICE_OFFER_ID, 
        PAYMENT_CATEGORY, ACCOUNT_ID, ACCOUNT_GROUP_ID, TRAFFIC_CASE, REVENUE_CODE, DIRECTION_TYPE, 
        DISTANCE_TYPE, SERVICE_TYPE, SERVICE_USG_TYPE, SVC_USG_DIRECTION, SVC_USG_DESTINATION, TRAFFIC_FLAG, REVENUE_FLAG,
        COMMUNITY_ID_1, COMMUNITY_ID_2, COMMUNITY_ID_3,RECORD_TYPE, ECI, SITE_TECH, SITE_OPERATOR, REVENUE_CODE_L7, MGR_SVCCLSS_ID, 
        OFFER_ID, OFFER_ATTR_KEY, OFFER_ATTR_VALUE, OFFER_AREA_NAME, PRC_DT, MICROCLUSTER_NAME, TRANSACTION_DATE, JOB_ID, SRC_TP
        """)
  }
  
  def genDailySummaryFromHourly( sqlContext:SQLContext ) : DataFrame = {
    return sqlContext.sql("""
        SELECT MSISDN,PREFIX_NUMBER,SERVICE_CITY_NAME,SERVICE_PROVIDER_ID,COUNTRY_NAME,HLR_BRANCH_NM,HLR_REGION_NM,
        OTHER_PREFIX_NO,DESTINATION_CITY_NAME,DESTINATION_PROVIDER_ID,DESTINATION_COUNTRY_NAME,SERVICE_CLASS_ID,PROMO_PACKAGE_CODE,PROMO_PACKAGE_NAME,BRAND_NAME,
        MSC_ADDRESS,ORIGINAL_REALM,ORIGINAL_HOST,MCCMNC,LAC,CI,LACI_CLUSTER_ID,LACI_CLUSTER_NM,LACI_REGION_ID,LACI_REGION_NM,LACI_AREA_ID,LACI_AREA_NM,LACI_SALESAREA_ID,LACI_SALESAREA_NM,
        IMSI,APN,SERVICE_SCENARIO,ROAMING_POSITION,FAF,RATING_GROUP,CONTENT_TYPE,IMEI,GGSN_ADDRESS,SGSN_ADDRESS,RAT_TYPE,SERVICE_OFFERING_ID,
        SUBSCRIBER_TYPE,ACCOUNT_ID,ACCOUNT_GROUPID,TRAFFIC_CASE,REVENUE_CODE,
        DIRECTION_TYPE,DISTANCE_TYPE,SERVICE_TYPE,SERVICE_USAGE_TYPE,SVC_USG_DIRECTION,SVC_USG_DESTINATION,
        TRAFFIC_FLAG,REVENUE_FLAG,
        sum(TOTAL_VOLUME) TOTAL_VOLUME, 
        sum(TOTAL_AMOUNT) TOTAL_AMOUNT, 
        sum(TOTAL_DURATION) TOTAL_DURATION,  
        cast(SUM(TOTAL_HIT) as int) TOTAL_HIT, 	
        COMMUNITY_ID_1,COMMUNITY_ID_2,COMMUNITY_ID_3,
        sum(ACCUMULATED_COST) ACCUMULATED_COST, 
        RECORD_TYPE,ECI,SITE_TECH,SITE_OPERATOR,SVC_USG_TRAFFIC,
        MGR_SVCCLSS_ID,OFFER_ID,OFFER_ATTR_KEY,OFFER_ATTR_VALUE,OFFER_AREA_NAME,
        PRC_DT,MICROCLUSTER_NAME, transaction_date, job_id, src_tp
      from cs5HourlyAggOutput
        group by MSISDN,PREFIX_NUMBER,SERVICE_CITY_NAME,SERVICE_PROVIDER_ID,COUNTRY_NAME,HLR_BRANCH_NM,HLR_REGION_NM,
        OTHER_PREFIX_NO,DESTINATION_CITY_NAME,DESTINATION_PROVIDER_ID,DESTINATION_COUNTRY_NAME,SERVICE_CLASS_ID,PROMO_PACKAGE_CODE,PROMO_PACKAGE_NAME,BRAND_NAME,
        MSC_ADDRESS,ORIGINAL_REALM,ORIGINAL_HOST,MCCMNC,LAC,CI,LACI_CLUSTER_ID,LACI_CLUSTER_NM,LACI_REGION_ID,LACI_REGION_NM,LACI_AREA_ID,LACI_AREA_NM,LACI_SALESAREA_ID,LACI_SALESAREA_NM,
        IMSI,APN,SERVICE_SCENARIO,ROAMING_POSITION,FAF,RATING_GROUP,CONTENT_TYPE,IMEI,GGSN_ADDRESS,SGSN_ADDRESS,RAT_TYPE,SERVICE_OFFERING_ID,
        SUBSCRIBER_TYPE,ACCOUNT_ID,ACCOUNT_GROUPID,TRAFFIC_CASE,REVENUE_CODE,
        DIRECTION_TYPE,DISTANCE_TYPE,SERVICE_TYPE,SERVICE_USAGE_TYPE,SVC_USG_DIRECTION,SVC_USG_DESTINATION,
        TRAFFIC_FLAG,REVENUE_FLAG,
        COMMUNITY_ID_1,COMMUNITY_ID_2,COMMUNITY_ID_3,
        RECORD_TYPE,ECI,SITE_TECH,SITE_OPERATOR,SVC_USG_TRAFFIC,
        MGR_SVCCLSS_ID,OFFER_ID,OFFER_ATTR_KEY,OFFER_ATTR_VALUE,OFFER_AREA_NAME,
        PRC_DT,MICROCLUSTER_NAME,transaction_date, job_id, src_tp
        """)
  }
  
  def genDailySummary( sqlContext:SQLContext ) : DataFrame = {
    return sqlContext.sql("""
        SELECT 
        A_PARTY_NUMBER MSISDN,
        A_PREFIX PREFIX_NUMBER,
        SERVICE_CITY_NAME,
        SERVICE_PROVIDER_ID,
        SERVICE_COUNTRY_NM COUNTRY_NAME,
        HLR_BRANCH_NM, 
        HLR_REGION_NM,
        B_PREFIX OTHER_PREFIX_NO,
        DESTINATION_CITY_NAME,
        DESTINATION_PROVIDER_ID,
        DESTINATION_COUNTRY_NM DESTINATION_COUNTRY_NAME,
        SERVICE_CLASS_ID,
        PROMO_PACKAGE_CODE,
        PROMO_PACKAGE_NAME,
        BRAND_NAME,
        MSC_ADDRESS,ORIGINAL_REALM,ORIGINAL_HOST,
        MCC_MNC MCCMNC,LAC,CI,LACI_CLUSTER_ID,LACI_CLUSTER_NM,LACI_REGION_ID,LACI_REGION_NM,LACI_AREA_ID,LACI_AREA_NM,LACI_SALESAREA_ID,LACI_SALESAREA_NM,
        IMSI,APN,SERVICE_SCENARIO,ROAMING_POSITION,FAF,RATING_GROUP,CONTENT_TYPE,IMEI,GGSN_ADDRESS,SGSN_ADDRESS,RAT_TYPE,
        SERVICE_OFFER_ID SERVICE_OFFERING_ID,
        PAYMENT_CATEGORY SUBSCRIBER_TYPE,
        ACCOUNT_ID, 
        ACCOUNT_GROUP_ID ACCOUNT_GROUPID,TRAFFIC_CASE,REVENUE_CODE,
        DIRECTION_TYPE,DISTANCE_TYPE,SERVICE_TYPE,
        SERVICE_USG_TYPE SERVICE_USAGE_TYPE,SVC_USG_DIRECTION,SVC_USG_DESTINATION,
        TRAFFIC_FLAG,REVENUE_FLAG,
        SUM(USAGE_VOLUME) TOTAL_VOLUME, 
        SUM(USAGE_AMOUNT) TOTAL_AMOUNT, 
        SUM(USAGE_DURATION) TOTAL_DURATION,  
        cast(SUM(HIT) as int) TOTAL_HIT, 
        COMMUNITY_ID_1,COMMUNITY_ID_2,COMMUNITY_ID_3,
        sum(ACCUMULATED_COST) ACCUMULATED_COST, 
        RECORD_TYPE,ECI,SITE_TECH,SITE_OPERATOR,
        REVENUE_CODE_L7 SVC_USG_TRAFFIC,
        MGR_SVCCLSS_ID,OFFER_ID,OFFER_ATTR_KEY,OFFER_ATTR_VALUE,OFFER_AREA_NAME,
        PRC_DT,MICROCLUSTER_NAME, TRANSACTION_DATE transaction_date, JOB_ID job_id, SRC_TP src_tp,
        CUSTOMER_SEGMENT
      from cs5Output
        group by 
        A_PARTY_NUMBER, A_PREFIX,
        SERVICE_CITY_NAME,
        SERVICE_PROVIDER_ID,
        SERVICE_COUNTRY_NM,
        HLR_BRANCH_NM, 
        HLR_REGION_NM,
        B_PREFIX,
        DESTINATION_CITY_NAME,
        DESTINATION_PROVIDER_ID,
        DESTINATION_COUNTRY_NM,
        SERVICE_CLASS_ID,
        PROMO_PACKAGE_CODE,
        PROMO_PACKAGE_NAME,
        BRAND_NAME,
        MSC_ADDRESS,ORIGINAL_REALM,ORIGINAL_HOST,
        MCC_MNC,LAC,CI,LACI_CLUSTER_ID,LACI_CLUSTER_NM,LACI_REGION_ID,LACI_REGION_NM,LACI_AREA_ID,LACI_AREA_NM,LACI_SALESAREA_ID,LACI_SALESAREA_NM,
        IMSI,APN,SERVICE_SCENARIO,ROAMING_POSITION,FAF,RATING_GROUP,CONTENT_TYPE,IMEI,GGSN_ADDRESS,SGSN_ADDRESS,RAT_TYPE,
        SERVICE_OFFER_ID,
        PAYMENT_CATEGORY,
        ACCOUNT_ID, 
        ACCOUNT_GROUP_ID,TRAFFIC_CASE,REVENUE_CODE,
        DIRECTION_TYPE,DISTANCE_TYPE,SERVICE_TYPE,
        SERVICE_USG_TYPE,SVC_USG_DIRECTION,SVC_USG_DESTINATION,
        TRAFFIC_FLAG,REVENUE_FLAG,
        COMMUNITY_ID_1,COMMUNITY_ID_2,COMMUNITY_ID_3,
        RECORD_TYPE,ECI,SITE_TECH,SITE_OPERATOR,
        REVENUE_CODE_L7,
        MGR_SVCCLSS_ID,OFFER_ID,OFFER_ATTR_KEY,OFFER_ATTR_VALUE,OFFER_AREA_NAME,
        PRC_DT,MICROCLUSTER_NAME, TRANSACTION_DATE, JOB_ID, SRC_TP,
        CUSTOMER_SEGMENT
        """)
  }
  
  def genGreenReportSummaryFromDaily( sqlContext:SQLContext ) : DataFrame = {
    return sqlContext.sql("""
        SELECT 
        transaction_date USG_TRX_DATE,
        SUM(TOTAL_AMOUNT) USG_REVENUE,
        REVENUE_CODE USG_REVENUE_CODE,
        SERVICE_CITY_NAME USG_CITY,
        SERVICE_TYPE USG_SERVICE_TYPE,
        FROM_UNIXTIME( UNIX_TIMESTAMP()) USG_LOAD_DATE,
        SERVICE_CLASS_ID USG_SERVICE_CLASSCODE,
        BRAND_NAME USG_BRAND_NAME,
        MCCMNC USG_MCCMNC,
        LAC USG_LAC,
        CI USG_CI,
        APN USG_APN,
        SUM(TOTAL_DURATION) USG_DURATION,
        SUM(TOTAL_VOLUME) USG_VOLUME,
        SUM(TOTAL_HIT) USG_HITS,
        SUM(TOTAL_DURATION) USG_EVENT_DUR,
        PROMO_PACKAGE_CODE USG_PROMO_PKG_CODE,
        PROMO_PACKAGE_NAME USG_PROMO_PKG_NAME,
        REVENUE_FLAG USG_REVENUE_FLAG,
        MGR_SVCCLSS_ID USG_MGR_SVCCLS_ID,
        OFFER_ID USG_OFFER_ID,
        OFFER_ATTR_KEY USG_OFFER_ATTR_KEY,
        OFFER_ATTR_VALUE USG_OFFER_ATTR_VALUE,
        OFFER_AREA_NAME USG_OFFER_AREA_NAME,
        PRC_DT, job_id, src_tp,
        MICROCLUSTER_NAME   
      from cs5DailyAggOutput
        group by REVENUE_CODE,SERVICE_CITY_NAME,SERVICE_TYPE,
        SERVICE_CLASS_ID,BRAND_NAME,MCCMNC,LAC,CI,APN,
        PROMO_PACKAGE_CODE,PROMO_PACKAGE_NAME,REVENUE_FLAG,
        MGR_SVCCLSS_ID,OFFER_ID,OFFER_ATTR_KEY,OFFER_ATTR_VALUE,OFFER_AREA_NAME,
        PRC_DT,
        transaction_date, job_id, src_tp, 
        MICROCLUSTER_NAME
        """)
  }
  
    def genGreenReportSummary( sqlContext:SQLContext ) : DataFrame = {
    return sqlContext.sql("""
        SELECT 
        TRANSACTION_DATE USG_TRX_DATE,
        SUM(USAGE_AMOUNT) USG_REVENUE,
        REVENUE_CODE USG_REVENUE_CODE,
        SERVICE_CITY_NAME USG_CITY,
        SERVICE_TYPE USG_SERVICE_TYPE,
        FROM_UNIXTIME( UNIX_TIMESTAMP()) USG_LOAD_DATE,
        SERVICE_CLASS_ID USG_SERVICE_CLASSCODE,
        BRAND_NAME USG_BRAND_NAME,
        MCC_MNC USG_MCCMNC,
        LAC USG_LAC,
        CI USG_CI,
        APN USG_APN,
        SUM(USAGE_DURATION) USG_DURATION,
        SUM(USAGE_VOLUME)  USG_VOLUME,
        cast(SUM(HIT) as int) USG_HITS,
        SUM(USAGE_DURATION) USG_EVENT_DUR,
        PROMO_PACKAGE_CODE USG_PROMO_PKG_CODE,
        PROMO_PACKAGE_NAME USG_PROMO_PKG_NAME,
        REVENUE_FLAG USG_REVENUE_FLAG,
        MGR_SVCCLSS_ID USG_MGR_SVCCLS_ID,
        OFFER_ID USG_OFFER_ID,
        OFFER_ATTR_KEY USG_OFFER_ATTR_KEY,
        OFFER_ATTR_VALUE USG_OFFER_ATTR_VALUE,
        OFFER_AREA_NAME USG_OFFER_AREA_NAME,
        PRC_DT, JOB_ID job_id, SRC_TP src_tp,
        MICROCLUSTER_NAME
      from cs5Output
        group by REVENUE_CODE,SERVICE_CITY_NAME,SERVICE_TYPE,
        SERVICE_CLASS_ID,BRAND_NAME,MCC_MNC,LAC,CI,APN,
        PROMO_PACKAGE_CODE,PROMO_PACKAGE_NAME,REVENUE_FLAG,
        MGR_SVCCLSS_ID,OFFER_ID,OFFER_ATTR_KEY,OFFER_ATTR_VALUE,OFFER_AREA_NAME,
        PRC_DT,
        TRANSACTION_DATE, JOB_ID, SRC_TP, 
        MICROCLUSTER_NAME
        """)
  }
    
  def genGreenReportSummaryAddon( sqlContext:SQLContext ) : DataFrame = {
    return sqlContext.sql("""
      SELECT 
        TRANSACTION_DATE USG_TRX_DATE,
        SUM(USAGE_AMOUNT) USG_REVENUE,
        REVENUE_CODE USG_REVENUE_CODE,
        SERVICE_CITY_NAME USG_CITY,
        SERVICE_TYPE USG_SERVICE_TYPE,
        FROM_UNIXTIME( UNIX_TIMESTAMP()) USG_LOAD_DATE,
        SERVICE_CLASS_ID USG_SERVICE_CLASSCODE,
        BRAND_NAME USG_BRAND_NAME,
        MCC_MNC USG_MCCMNC,
        LAC USG_LAC,
        CI USG_CI,
        APN USG_APN,
        SUM(USAGE_DURATION) USG_DURATION,
        SUM(USAGE_VOLUME)  USG_VOLUME,
        cast(SUM(HIT) as int) USG_HITS,
        SUM(USAGE_DURATION) USG_EVENT_DUR,
        PROMO_PACKAGE_CODE USG_PROMO_PKG_CODE,
        PROMO_PACKAGE_NAME USG_PROMO_PKG_NAME,
        REVENUE_FLAG USG_REVENUE_FLAG,
        MGR_SVCCLSS_ID USG_MGR_SVCCLS_ID,
        OFFER_ID USG_OFFER_ID,
        OFFER_ATTR_KEY USG_OFFER_ATTR_KEY,
        OFFER_ATTR_VALUE USG_OFFER_ATTR_VALUE,
        OFFER_AREA_NAME USG_OFFER_AREA_NAME,
        PRC_DT, JOB_ID job_id, SRC_TP src_tp,
        LACI_CLUSTER_ID MICROCLUSTER_ID, 
        RAT_TYPE,
        ORIGINAL_HOST ORIGIN_HOST, 
        ORIGINAL_REALM ORIGIN_REALM, 
        ORIGIN  
      FROM 
        cs5Output
      GROUP BY REVENUE_CODE,SERVICE_CITY_NAME,SERVICE_TYPE,
        SERVICE_CLASS_ID,BRAND_NAME,MCC_MNC,LAC,CI,APN,
        PROMO_PACKAGE_CODE,PROMO_PACKAGE_NAME,REVENUE_FLAG,
        MGR_SVCCLSS_ID,OFFER_ID,OFFER_ATTR_KEY,OFFER_ATTR_VALUE,OFFER_AREA_NAME,
        PRC_DT,
        TRANSACTION_DATE, JOB_ID, SRC_TP, 
        MICROCLUSTER_NAME,
        LACI_CLUSTER_ID,RAT_TYPE,ORIGINAL_HOST,ORIGINAL_REALM, ORIGIN
        """)
  }  
  
  def genDailyPostpaidSummary( sqlContext:SQLContext ) : DataFrame = {
     return sqlContext.sql("""
        SELECT
        SERVED_MSISDN MSISDN,
        PREFIX PREFIX_NUMBER,
        CITY SERVICE_CITY_NAME,
        PROVIDERID SERVICE_PROVIDER_ID,
        COUNTRY COUNTRY_NAME,
        BRANCH HLR_BRANCH_NM,
        REGION HLR_REGION_NM,
        B_PREFIX OTHER_PREFIX_NO,
        DEST_CITY DESTINATION_CITY_NAME,
        DEST_PROVID DESTINATION_PROVIDER_ID,
        DEST_COUNTRY DESTINATION_COUNTRY_NAME,
        CCR_CCA_SERVICE_CLASS_ID SERVICE_CLASS_ID,
        POSTPAID_SERVICE_NAME SERVICE_CLASS_NAME,
        MSC_IPADDDR MSC_ADDRESS,
        ORIGIN_REALM ORIGINAL_REALM,
        ORIGIN_HOST ORIGINAL_HOST,
        MCCMNC ,
        LAC,
        CI,
        CLUSTER_ID LACI_CLUSTER_ID,
        CLUSTER_NM LACI_CLUSTER_NM,
        LACI_REGION_ID,
        LACI_REGION_NM,
        LACI_AREA_ID,
        LACI_AREA_NM,
        LACI_SALESAREA_ID,
        LACI_SALESAREA_NM,
        IMSI,
        APN,
        CCR_SERVICE_SCENARIO SERVICE_SCENARIO,
        CCR_ROAMING_POSITION ROAMING_POSITION,
        CCR_CCA_FAF_ID FAF,
        RATING_GROUP,
        CONTENT_TYPE,
        IMEI,
        GGSN_IPADDR GGSN_ADDRESS,
        SGSN_IPADDR SGSN_ADDRESS,
        RAT_TYPE,
        'POSTPAID' SUBSCRIBER_TYPE,
        ACCOUNT_ID,
        REVENUE_CODE,
        GL_CODE,
        GL_NAME,
        SERVICE_TYPE,
        SERVICE_USAGE_TYPE,
        REVENUE_FLAG,
        SUM(VOLUME) TOTAL_VOLUME,
        SUM(CHARGE_AMOUNT) TOTAL_AMOUNT,
        SUM(DURATION) TOTAL_DURATION,
        cast(SUM(HITS) as int) TOTAL_HIT,
        SUM(ACCUMULATEDCOST_AMOUNT) ACCUMULATED_COST,
        ECI,
        SITE_TECH ,
        SITE_OPERATOR,
        USG_MGR_SVCCLS_ID MGR_SVCCLS_ID ,
        USG_OFFER_ID OFFER_ID ,
        USG_OFFER_ATTR_KEY OFFER_ATTR_KEY ,
        USG_OFFER_ATTR_VALUE OFFER_ATTR_VALUE,
        USG_OFFER_ATTR_VALUE OFFER_AREA_NAME,
        PRC_DT,
        TRANSACTION_DATE transaction_date,
        JOB_ID job_id,
        SRC_TP src_tp
     FROM cs5PostOutput
        GROUP BY 
        SERVED_MSISDN,
        PREFIX,
        CITY,
        PROVIDERID,
        COUNTRY,
        BRANCH,
        REGION,
        B_PREFIX,
        DEST_CITY,
        DEST_PROVID,
        DEST_COUNTRY,
        CCR_CCA_SERVICE_CLASS_ID,
        POSTPAID_SERVICE_NAME,
        MSC_IPADDDR,
        ORIGIN_REALM,
        ORIGIN_HOST,
        MCCMNC,
        LAC,
        CI,
        CLUSTER_ID,
        CLUSTER_NM,
        LACI_REGION_ID,
        LACI_REGION_NM,
        LACI_AREA_ID,
        LACI_AREA_NM,
        LACI_SALESAREA_ID,
        LACI_SALESAREA_NM,
        IMSI,
        APN,
        CCR_SERVICE_SCENARIO,
        CCR_ROAMING_POSITION,
        CCR_CCA_FAF_ID,
        RATING_GROUP,
        CONTENT_TYPE,
        IMEI,
        GGSN_IPADDR,
        SGSN_IPADDR,
        RAT_TYPE,
        'POSTPAID',
        ACCOUNT_ID,
        REVENUE_CODE,
        GL_CODE,
        GL_NAME,
        SERVICE_TYPE,
        SERVICE_USAGE_TYPE,
        REVENUE_FLAG,
        ECI,
        SITE_TECH ,
        SITE_OPERATOR,
        USG_MGR_SVCCLS_ID,
        USG_OFFER_ID,
        USG_OFFER_ATTR_KEY,
        USG_OFFER_ATTR_VALUE,
        USG_OFFER_ATTR_VALUE,
        PRC_DT,
        TRANSACTION_DATE,
        JOB_ID,SRC_TP
     """)
  }
  
  def genPrepaidTdwSummary( sqlContext:SQLContext ) : DataFrame = {
    
    sqlContext.udf.register("getTuple", Common.getTuple _)
    sqlContext.udf.register("getTupleInTuple", Common.getTupleInTuple _)
    sqlContext.udf.register("concatAC", this.concatAC _)
    
    
     return sqlContext.sql("""
      SELECT
        TRANSACTION_DATE, TRANSACTION_HOUR, 
        A_PARTY_NUMBER MSISDN, 
        A_PREFIX, 
        SERVICE_CITY_NAME, SERVICE_PROVIDER_ID, SERVICE_COUNTRY_NM,
        B_PREFIX, DESTINATION_CITY_NAME, DESTINATION_PROVIDER_ID, DESTINATION_COUNTRY_NM, 
        SERVICE_CLASS_ID, PROMO_PACKAGE_CODE, BRAND_NAME, MSC_ADDRESS, 
        MCC_MNC, LAC, CI, LACI_CLUSTER_ID, APN, SERVICE_SCENARIO, ROAMING_POSITION, FAF,RATING_GROUP, 
        IMEI, RAT_TYPE, 
        ACCOUNT_ID, ACCOUNT_GROUP_ID, REVENUE_CODE, DIRECTION_TYPE, 
        DISTANCE_TYPE, SERVICE_TYPE, SVC_USG_DIRECTION, SVC_USG_DESTINATION, TRAFFIC_FLAG, REVENUE_FLAG,
        REVENUE_CODE_L1,REVENUE_CODE_L2,REVENUE_CODE_L3,REVENUE_CODE_L4,REVENUE_CODE_L5,REVENUE_CODE_L6,
        REVENUE_CODE_L7,REVENUE_CODE_L8,REVENUE_CODE_L9,
        sum(USAGE_VOLUME) TOTAL_VOLUME, 
        sum(USAGE_AMOUNT) TOTAL_AMOUNT, 
        sum(USAGE_DURATION) TOTAL_DURATION,  
        sum(HIT) TOTAL_HIT, 
        COMMUNITY_ID_1, COMMUNITY_ID_2, COMMUNITY_ID_3, 
        ECI, MGR_SVCCLSS_ID, 
        OFFER_ID, OFFER_ATTR_KEY, OFFER_ATTR_VALUE, OFFER_AREA_NAME, 
        ACCUMULATOR, 
        nvl(sum(DA_UNIT_AMOUNT),0) DA_UNIT_AMOUNT,
        DA_UNIT_TYPE, CALL_CLASS_CAT,
        PRC_DT, JOB_ID, SRC_TP, MICROCLUSTER_NAME,
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 0, '~', 0)) AC_ID_1,
        nvl(sum(getTupleInTuple(ACCUMULATOR, '^', 0, '~', 2)),0) AC_VAL_1,
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 1, '~', 0)) AC_ID_2,
        nvl(sum(getTupleInTuple(ACCUMULATOR, '^', 1, '~', 2)),0) AC_VAL_2,
        getTuple(OFFER_ID, ',', 0) OFFER_ID_1,
        getTuple(OFFER_ID, ',', 1) OFFER_ID_2,
        getTuple(OFFER_ID, ',', 2) OFFER_ID_3,
        getTuple(OFFER_ID, ',', 3) OFFER_ID_4,
        getTuple(OFFER_ID, ',', 4) OFFER_ID_5
      FROM cs5Output
        group by
        TRANSACTION_DATE, TRANSACTION_HOUR, 
        A_PARTY_NUMBER, A_PREFIX, 
        SERVICE_CITY_NAME, SERVICE_PROVIDER_ID, SERVICE_COUNTRY_NM,
        B_PREFIX, DESTINATION_CITY_NAME, DESTINATION_PROVIDER_ID, DESTINATION_COUNTRY_NM, 
        SERVICE_CLASS_ID, PROMO_PACKAGE_CODE, BRAND_NAME, MSC_ADDRESS, 
        MCC_MNC, LAC, CI, LACI_CLUSTER_ID, APN, SERVICE_SCENARIO, ROAMING_POSITION, FAF,RATING_GROUP, 
        IMEI, RAT_TYPE, 
        ACCOUNT_ID, ACCOUNT_GROUP_ID, REVENUE_CODE, DIRECTION_TYPE, 
        DISTANCE_TYPE, SERVICE_TYPE, SVC_USG_DIRECTION, SVC_USG_DESTINATION, TRAFFIC_FLAG, REVENUE_FLAG,
        REVENUE_CODE_L1,REVENUE_CODE_L2,REVENUE_CODE_L3,REVENUE_CODE_L4,REVENUE_CODE_L5,REVENUE_CODE_L6,
        REVENUE_CODE_L7,REVENUE_CODE_L8,REVENUE_CODE_L9,
        COMMUNITY_ID_1, COMMUNITY_ID_2, COMMUNITY_ID_3, 
        ECI, MGR_SVCCLSS_ID, 
        OFFER_ID, OFFER_ATTR_KEY, OFFER_ATTR_VALUE, OFFER_AREA_NAME, 
        ACCUMULATOR, 
        DA_UNIT_TYPE, CALL_CLASS_CAT,
        PRC_DT, JOB_ID, SRC_TP, MICROCLUSTER_NAME,
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 0, '~', 0)),
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 1, '~', 0)),
        getTuple(OFFER_ID, ',', 0),
        getTuple(OFFER_ID, ',', 1),
        getTuple(OFFER_ID, ',', 2),
        getTuple(OFFER_ID, ',', 3),
        getTuple(OFFER_ID, ',', 4)
     """)
  }
  def genPrepaidTdwSummaryAddon( sqlContext:SQLContext ) : DataFrame = {
    
    sqlContext.udf.register("getTuple", Common.getTuple _)
    sqlContext.udf.register("getTupleInTuple", Common.getTupleInTuple _)
    sqlContext.udf.register("concatAC", this.concatAC _)
    
    
     return sqlContext.sql("""
      SELECT
        TRANSACTION_DATE, TRANSACTION_HOUR, 
        A_PARTY_NUMBER MSISDN, 
        A_PREFIX, 
        SERVICE_CITY_NAME, SERVICE_PROVIDER_ID, SERVICE_COUNTRY_NM,
        B_PREFIX, DESTINATION_CITY_NAME, DESTINATION_PROVIDER_ID, DESTINATION_COUNTRY_NM, 
        SERVICE_CLASS_ID, PROMO_PACKAGE_CODE, BRAND_NAME, MSC_ADDRESS, 
        MCC_MNC, LAC, CI, LACI_CLUSTER_ID, APN, SERVICE_SCENARIO, ROAMING_POSITION, FAF,RATING_GROUP, 
        IMEI, RAT_TYPE, 
        ACCOUNT_ID, ACCOUNT_GROUP_ID, REVENUE_CODE, DIRECTION_TYPE, 
        DISTANCE_TYPE, SERVICE_TYPE, SVC_USG_DIRECTION, SVC_USG_DESTINATION, TRAFFIC_FLAG, REVENUE_FLAG,
        REVENUE_CODE_L1,REVENUE_CODE_L2,REVENUE_CODE_L3,REVENUE_CODE_L4,REVENUE_CODE_L5,REVENUE_CODE_L6,
        REVENUE_CODE_L7,REVENUE_CODE_L8,REVENUE_CODE_L9,
        sum(USAGE_VOLUME) TOTAL_VOLUME, 
        sum(USAGE_AMOUNT) TOTAL_AMOUNT, 
        sum(USAGE_DURATION) TOTAL_DURATION,  
        sum(HIT) TOTAL_HIT, 
        COMMUNITY_ID_1, COMMUNITY_ID_2, COMMUNITY_ID_3, 
        ECI, MGR_SVCCLSS_ID, 
        OFFER_ID, OFFER_ATTR_KEY, OFFER_ATTR_VALUE, OFFER_AREA_NAME, 
        ACCUMULATOR, 
        nvl(sum(DA_UNIT_AMOUNT),0) DA_UNIT_AMOUNT,
        DA_UNIT_TYPE, CALL_CLASS_CAT,
        PRC_DT, JOB_ID, SRC_TP, MICROCLUSTER_NAME,
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 0, '~', 0)) AC_ID_1,
        nvl(sum(getTupleInTuple(ACCUMULATOR, '^', 0, '~', 3)),0) AC_VAL_1,
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 1, '~', 0)) AC_ID_2,
        nvl(sum(getTupleInTuple(ACCUMULATOR, '^', 1, '~', 3)),0) AC_VAL_2,
        getTuple(OFFER_ID, ',', 0) OFFER_ID_1,
        getTuple(OFFER_ID, ',', 1) OFFER_ID_2,
        getTuple(OFFER_ID, ',', 2) OFFER_ID_3,
        getTuple(OFFER_ID, ',', 3) OFFER_ID_4,
        getTuple(OFFER_ID, ',', 4) OFFER_ID_5,
        ORIGINAL_HOST ORIGIN_HOST ,
        ORIGINAL_REALM ORIGIN_REALM,
        ORIGIN
      FROM cs5Output
        group by
        TRANSACTION_DATE, TRANSACTION_HOUR, 
        A_PARTY_NUMBER, A_PREFIX, 
        SERVICE_CITY_NAME, SERVICE_PROVIDER_ID, SERVICE_COUNTRY_NM,
        B_PREFIX, DESTINATION_CITY_NAME, DESTINATION_PROVIDER_ID, DESTINATION_COUNTRY_NM, 
        SERVICE_CLASS_ID, PROMO_PACKAGE_CODE, BRAND_NAME, MSC_ADDRESS, 
        MCC_MNC, LAC, CI, LACI_CLUSTER_ID, APN, SERVICE_SCENARIO, ROAMING_POSITION, FAF,RATING_GROUP, 
        IMEI, RAT_TYPE, 
        ACCOUNT_ID, ACCOUNT_GROUP_ID, REVENUE_CODE, DIRECTION_TYPE, 
        DISTANCE_TYPE, SERVICE_TYPE, SVC_USG_DIRECTION, SVC_USG_DESTINATION, TRAFFIC_FLAG, REVENUE_FLAG,
        REVENUE_CODE_L1,REVENUE_CODE_L2,REVENUE_CODE_L3,REVENUE_CODE_L4,REVENUE_CODE_L5,REVENUE_CODE_L6,
        REVENUE_CODE_L7,REVENUE_CODE_L8,REVENUE_CODE_L9,
        COMMUNITY_ID_1, COMMUNITY_ID_2, COMMUNITY_ID_3, 
        ECI, MGR_SVCCLSS_ID, 
        OFFER_ID, OFFER_ATTR_KEY, OFFER_ATTR_VALUE, OFFER_AREA_NAME, 
        ACCUMULATOR, 
        DA_UNIT_TYPE, CALL_CLASS_CAT,
        PRC_DT, JOB_ID, SRC_TP, MICROCLUSTER_NAME,
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 0, '~', 0)),
        concatAC(getTupleInTuple(ACCUMULATOR, '^', 1, '~', 0)),
        getTuple(OFFER_ID, ',', 0),
        getTuple(OFFER_ID, ',', 1),
        getTuple(OFFER_ID, ',', 2),
        getTuple(OFFER_ID, ',', 3),
        getTuple(OFFER_ID, ',', 4),
        ORIGINAL_HOST,
        ORIGINAL_REALM,
        ORIGIN
     """)
  }
  
  /**
   * 
   */
  def concatAC(ACDetails: String) : String = {
    return {
      if(ACDetails.isEmpty())    
        return ""
      else
        return "AC" + ACDetails        
    }
  }
}